
declare(
        clk,
        a,
        states_1,
        states_2,
        states_3);



CLK_28 : clk ^2;

CLK_29 : when clk;

zx : states_1 * CLK_29;

x : not zx;

zy : states_2 * CLK_29;

y : zy or a;

zz : states_3 * CLK_29;

z : zz and a;




events: [
        clk,
        a];


states: [
        states_1,
        states_2,
        states_3];


initialisations: [
        states_1 = - 1,
        states_2 = 1,
        states_3 = - 1];


evolutions: [
        x * CLK_29 + (1 - CLK_29) * states_1,
        y * CLK_29 + (1 - CLK_29) * states_2,
        z * CLK_29 + (1 - CLK_29) * states_3];


constraints: [
        a ^2 = CLK_29];


controllables: [
        ];


free_cond: [
        ];


